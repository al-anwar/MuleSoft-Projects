<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="using-arraysFlow" doc:id="fe9adb61-c399-4f94-8500-591f4df9b0ed" >
		<ee:transform doc:name="Transform Message" doc:id="01774702-0b41-42b8-9e13-ed7736cf7d00" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw

import dw::core::Arrays

var productsXml = readUrl("classpath://examples/products.xml", "application/xml")
var products = productsXml.products.*product

---
flatten(products.originalPrice Arrays::divideBy(2))

// products.originalPrice Arrays::divideBy(2)

// products.originalPrice

// products Arrays::sumBy $.originalPrice

//  products Arrays::sumBy if ($.originalPrice > 300) $.originalPrice else 0
 
// sizeOf(products)

// products Arrays::countBy $.originalPrice > 300

// Arrays::every (products,(product) -> product.originalPrice <= 5000)

// products Arrays::some ($.originalPrice < 5000)


]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="using-objectsFlow" doc:id="bd3c7365-97a0-453f-8864-41d99857794b" >
		<ee:transform doc:name="Transform Message" doc:id="992213b9-d47e-4fbf-95cc-7c8cabb383be" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw

import dw::core::Objects

var productsXml = readUrl("classpath://examples/productswithns.xml", "application/xml")

var products = productsXml.products.*product

---

{one:"ONE", one: "One2", two:"TWO"} Objects::mergeWith {one:"Number1"}

// Objects::valueSet(productsXml.products)

// Objects::entrySet(productsXml.products) map $.value

// pluck(productsXml.products, (V,K,I) -> product : K.@)

// Objects::keySet(productsXml.products) map $.@

// Objects::nameSet(productsXml.products)

// productsXml








]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
